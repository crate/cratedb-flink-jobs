plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "java"
    id "idea"
    id "application"
}

repositories {
    mavenCentral()
}

group = 'io.crate'
archivesBaseName = 'cratedb-flink-jobs'
version = 0.5

tasks.register("printProjectVersion") {
    println "ProjectVersion: " + project.version
}

tasks.register("printFlinkVersion") {
    println "FlinkVersion: " + flinkVersion
}

ext {
    flinkVersion = '1.19.0'
    flinkJdbcVersion = '3.2.0-1.19'
    flinkKafkaVersion = '3.1.0-1.18'
    jacksonVersion = '2.18.2'
    postgresJDBCVersion = '42.7.3'
    crateJDBCVersion = '2.7.0'
    slf4jVersion = '2.0.12'
    log4jVersion = '2.23.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
    flinkShadowJar // dependencies which go into the shadowJar
    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

dependencies {
    // Flink
    // https://mvnrepository.com/artifact/org.apache.flink
    flinkShadowJar "org.apache.flink:flink-clients:${flinkVersion}"
    flinkShadowJar "org.apache.flink:flink-table-api-java:${flinkVersion}"
    flinkShadowJar "org.apache.flink:flink-table-api-java-bridge:${flinkVersion}"
    flinkShadowJar "org.apache.flink:flink-connector-jdbc:${flinkJdbcVersion}"

    // Kafka
    // https://mvnrepository.com/artifact/org.apache.flink
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype
    flinkShadowJar "org.apache.flink:flink-connector-kafka:${flinkKafkaVersion}"
    flinkShadowJar "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // PostgreSQL
    flinkShadowJar "org.postgresql:postgresql:${postgresJDBCVersion}"
    // CrateDB - for the Simple*Job to be run inside IDE
    implementation "io.crate:crate-jdbc:${crateJDBCVersion}"

    runtimeOnly "org.apache.flink:flink-runtime:${flinkVersion}"
    runtimeOnly "org.apache.flink:flink-table-runtime:${flinkVersion}"
    runtimeOnly "org.apache.flink:flink-table-planner-loader:${flinkVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
}

application {
    mainClassName = "io.crate.streaming.TaxiRidesStreamingJob"
    applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar
    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar
    javadoc.classpath += configurations.flinkShadowJar
}
run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                   'Build-Jdk': System.getProperty('java.version'),
                   'Main-Class': 'io.crate.streaming.TaxiRidesStreamingJob'
    }
    archiveFileName = 'cratedb-flink-jobs-' + project.version + '-thin.jar'
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
    archiveFileName = 'cratedb-flink-jobs-' + project.version + '.jar'
}


application {
    mainClassName = "io.crate.streaming.TaxiRidesStreamingJob"
    applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar
    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar
    javadoc.classpath += configurations.flinkShadowJar
}
run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                   'Build-Jdk': System.getProperty('java.version')
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
}

assemble.dependsOn(shadowJar)

// Invoke arbitrary classes interactively. Example:
// ./gradlew runJob -P demoJob=io.crate.flink.demo.SimpleTableApiJob
task runJob(type:JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = project.hasProperty("demoJob") ? project.getProperty("demoJob") : null
}
